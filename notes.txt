PROJECT = custy app react and native, provider app react and native, admin app with 1 react app all on same api, manigod react app with 
manigod reg and pre-admin access, and admin interface

===============================================================================================================================================
 

CURRENT =>=>=>: 


    __move on to plan rest of routers and routes for api functionality 1 at a time!

    

        3: user_ratings: get, get id and/userid, post, put (for specific rating), delete (for specific rating)

        4: provider_ratings: get, get id and /providerid, post, put (for specific rating), delete (for specific rating)

        VVVV EASY helpers migrations and routers done just finish with following:
        5: users: get to /id, add activated boolean in migrations with checkdoubleroles middlware

        6: providers: get to /id, add activated boolean in migrations with checkdoubleroles middleware on 

        

        __after ^ rollback migrations migrate latest, May need to also dropdb/createdb to start fresh and test:
        TESTS:
        bookingsHelpers, bookingsRouter (pay close attention to the getby userid and getby provider id routes and helpers),



        

        



    




================================================================================================================================================

TODO:


PROGRAMMATICS (tweaks to those features that are added already):


    API:
        

        email/text notifications sent to all higher ups when anyone added to admin or manigods db

        Password: enter change password forgot username/password functionality

        Migrations:

        add bookings with user, provider, date,...

        add images (user and provider) and gallery (provider) endpoints in db



|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


    FRONT-END APPS:

        Validations needed from FE via yup:
        Signup:(see migrations)
        //will have to use something to validate these fields ie yup from frontend to make sure pw is certain legnth and has symbols lower upper and 1 num and zipcode


        Role MGMT:
        //Manigods UI app will be local only on manigods machines and accessed via the private repo that only I an d joseph have access too.  not deployed, 
        //NOTE FOR FE: when making admin interface do not enter password field for updating profiles, api does not allow that too

===============================================================================================================================================


PLANNING (possible future features not added in yet):

    services: mani pedi, waxing, hair, 

    Figure out if manigods use same interface as admin as well, or have a public manigods w special permissions that can not add to admin db and 
    do other super private tranactions on that ie option A: 2 interfaces 1 public; 1 private, or option B: just 1 private and then separate
     admin accounts (will for forseeable future not need the first option so can get done faster with option B)

    PAYMENT:
    //find a framework to handle this, but may need to delete that later

API to FE INTEGRATION:

    RATINGS:
    may need to tweak the nullability of the ratings and rating ids later when we see the flow of how services are entered from front end when done 
    see line 70-72 user_ratingsRouter.js: the ids will come from where and the flow of the rating process to the user to rate the provider

    ADMIN:
    may need to pull timestamps (created_at etc) in get calls and format that so admin can see when the profiles created etc.
 
    BOOKINGS AND SERVICES
    when making bookings (post see bookingsRouter line 56-57) userId will come from the users data, and provider_id will come from a screen where you click on the provider to book
    confirmations sent to provider upon user booking, when they click to confirm, the put will be called to change the tbl.boolean comfrimed to 1

    post will be used when the provider completes the service.  They will verify to end and then it will post to completed services, and then rating 
    notifications will go out to both user and provider (immediately to provider like uber does) see line 70-72 of servicesRouter.js

VERY END before deploy production:
    
    UNCOMMENT THE CHECKROLES MIDDLEWARE CALLS ON THE ROUTES

    prettify code

    DRY:
    in migrations maybe make a function for some of the redundant schemas if they stay the same ie admin and manigods before final implementation.  leave as is now for debugging,
    refactoring, and comments


===============================================================================================================================================



