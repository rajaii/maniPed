PROJECT = custy app react and native, provider app react and native, admin app with 1 react app all on same api, manigod react app with 
manigod reg and pre-admin access, and admin interface

===============================================================================================================================================
 

CURRENT =>=>=>: 


    __check all routes w/o middleware DONE: manigods (hash pw on put added too), preadmin, PICK UP HERE

    __password hashing needed on all put routes see manigods router.  This will be used in the update password functionality later. 
            *import brypt at top see manigodsRouter line 2
            *add pw hashing see manigodsrouter line 20-22

    __add checkroles middleware on specific routes in the routers files that need protection not on whole route so no conflict when users try to
    access their own profiles (some done)

    __check all routes with middlewaress

    __move on to plan rest of routers and routes for api functionality 1 at a time!


================================================================================================================================================

TODO:


PROGRAMMATICS (tweaks to those features that are added already):


    API:

        email/text notifications sent to all higher ups when anyone added to admin or manigods db

        Password: enter change password forgot username/password functionality

        Migrations:
        add images (user and provider) and gallery (provider) endpoints in db



|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


    FRONT-END APPS:

        Validations needed from FE via yup:
        Signup:(see migrations)
        //will have to use something to validate these fields ie yup from frontend to make sure pw is certain legnth and has symbols lower upper and 1 num and zipcode


        Role MGMT:
        //Manigods UI app will be local only on manigods machines and accessed via the private repo that only I an d joseph have access too.  not deployed, 
        //NOTE FOR FE: when making admin interface do not enter password field for updating profiles, api does not allow that too

===============================================================================================================================================


PLANNING (possible future features not added in yet):

    Figure out if manigods use same interface as admin as well, or have a public manigods w special permissions that can not add to admin db and 
    do other super private tranactions on that ie option A: 2 interfaces 1 public; 1 private, or option B: just 1 private and then separate
     admin accounts (will for forseeable future not need the first option so can get done faster with option B)

    PAYMENT:
    //find a framework to handle this, but may need to delete that later


VERY END before deploy production:

    prettify code

    DRY:
    in migrations maybe make a function for some of the redundant schemas if they stay the same ie admin and manigods before final implementation.  leave as is now for debugging,
    refactoring, and comments


===============================================================================================================================================

Present:

custy app react and native, provider app react and native, admin app with 1 react app all on same api, manigod react app (local) with 
manigod reg and pre-admin access, and admin interface all on same api

Upper mgmt can add admin to the preadmin list when hired so then can access and help users or providers

See migrations

